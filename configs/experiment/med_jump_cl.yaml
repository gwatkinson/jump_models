# @package _global_

# to execute this experiment run:
# python train.py experiment=med_jump_cl

defaults:
  - override /data: jump_cl.yaml
  - override /data/compound_transform: dgllife_gin.yaml
  - override /model: jump_cl.yaml
  - override /model/image_encoder: resnet18.yaml
  - override /model/molecule_encoder: gin_context_pred.yaml
  - override /model/optimizer: adamax.yaml
  - override /model/scheduler: cosine_annealing_warm_restart.yaml
  - override /callbacks: jump.yaml
  - override /trainer: gpu.yaml
  - override /logger: many_loggers.yaml

# all parameters below will be merged with parameters from default configurations set above
# this allows you to overwrite only specified parameters

tags:
  - med_jump_cl
  - simple_contrastive_training
  - ${model.molecule_encoder.pretrained_name}
  - ${model.image_encoder.instance_model_name}

seed: 12345

compile: False

trainer:
  min_epochs: 0
  max_epochs: 50
  log_every_n_steps: 5
  gradient_clip_val: null # 0.5
  num_sanity_val_steps: 1

  devices: ???


data:
  batch_size: 512
  num_workers: 24
  prefetch_factor: 2

  transform:
    size: 256

  splitter:
    train: 25_000
    test: 3000
    val: 2000

  split_path: ${paths.split_path}/med_jump_cl/


model:
  embedding_dim: 512
  lr: 1e-2

  scheduler:
    T_0: 5
    T_mult: 1

  example_input_path: /projects/cpjump1/jump/models/example_batch/simple_jump_cl/batch.pth


callbacks:
  jump_cl_freezer:
    unfreeze_image_backbone_at_epoch: 7
    image_initial_denom_lr: 50
    image_lambda_func:
      a0: 1.8
    unfreeze_molecule_backbone_at_epoch: 5
    molecule_initial_denom_lr: 50
    molecule_lambda_func:
      a0: 1.8

  wandb_watcher:
    log_freq: 100
    watch_log: all


logger:
  wandb:
    tags: ${tags}
    project: "jump_models"
    group: "med_jump_cl"
    job_type: ""
    log_model: True

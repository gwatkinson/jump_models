# @package _global_

# to execute this experiment run:
# python train.py experiment=big_jump_cl

defaults:
  - override /data: jump_cl.yaml
  - override /data/compound_transform: dgllife_gin.yaml
  - override /model: jump_cl.yaml
  - override /model/image_encoder: resnet34.yaml
  - override /model/molecule_encoder: gin_context_pred.yaml
  - override /model/optimizer: adam.yaml
  - override /model/scheduler: cosine_annealing.yaml
  - override /callbacks: default_jump.yaml
  - override /trainer: ddp.yaml
  - override /logger: many_loggers.yaml

# all parameters below will be merged with parameters from default configurations set above
# this allows you to overwrite only specified parameters

tags:
  - med_jump_cl
  - simple_contrastive_training
  - ${model.molecule_encoder.pretrained_name}
  - ${model.image_encoder.instance_model_name}

seed: 12345

compile: False

trainer:
  min_epochs: 35
  max_epochs: 100
  log_every_n_steps: 25
  gradient_clip_val: 0.5
  num_sanity_val_steps: 2

  devices: 3


data:
  batch_size: 256
  num_workers: 32
  pin_memory: False
  prefetch_factor: 4

  transform:
    size: 256

  splitter:
    train: 90_000
    test: 10_000
    val: 5_000
    # retrieval: 3_000

  split_path: ${paths.split_path}/big_jump_cl/


model:
  embedding_dim: 512

  optimizer:
    lr: 1e-4

  # scheduler:
  #   gamma: 0.9

  example_input_path: /projects/cpjump1/jump/models/example_batch/simple_jump_cl/batch.pth


logger:
  wandb:
    tags: ${tags}
    project: "jump_models"
    group: "big_jump_cl"
    job_type: ""
    log_model: True
